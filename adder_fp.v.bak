module floating_unplined_adder(clk, ovf, unf, FPinput1, FPinput2, FPsum);
	input clk;
	output reg ovf, unf;
	input [15:0] FPinput1, FPinput2;
	output [15:0] FPsum;
	
	reg S1, S2;		// 1-bit sign bit
	reg [4:0] E1, E2;	// 5-bit exponent field
	reg [12:0] F1, F2;	// 10-bit mantissa bit
	
	wire FV, FU;
	wire [14:0] F1comp, F2comp;
	wire [14:0] Addout, Fsum;
	reg [2:0] state;
	
	initial
	begin
		state 	= 0;
		ovf		= 0;
		unf		= 0;
		S1		= 0;
		S2		= 0;
		E1		= 0;
		E2		= 0;
		F1		= 0;
		F2		= 0;
	end
	
	assign F1comp 	= (S1 == 1'b1) ? ~({2'b00, F1}) + 1 : {2'b00, F1};
	assign F2comp 	= (S2 == 1'b1) ? ~({2'b00, F2}) + 1 : {2'b00, F2};
	assign Addout 	= F1comp + F2comp;
	assign Fsum		= ((Addout[14]) == 1'b0) ? Addout : ~Addout + 1;
	assign FV		= Fsum[14] ^ Fsum[13];
	assign FU		= ~F1[12];
	assign FPsum	= {S1, E1, F1[11:2]};
	
	always @(posedge clk)
	begin
		case (state)
			0 	:	begin
					E1 	<= FPinput1[14:10];
					S1	<= FPinput1[15];
					F1[11:0]	<= {FPinput1[9:0], 2'b00};
					if (FPinput1 == 0)
						F1[12]	<= 1'b0;
					else
						F1[12]	<= 1'b1;
					ovf		<= 1'b0;
					unf		<= 1'b0;
					state	<= 3'd1;
				end
			1	:	begin
					E2 	<= FPinput2[14:10];
					S2	<= FPinput2[15];
					F2[11:0]	<= {FPinput2[9:0], 2'b00};
					if (FPinput2 == 0)
						F2[12]	<= 1'b0;
					else
						F2[12]	<= 1'b1;
					state	<= 3'd2;
					end
			2	:	begin
					if (F1 == 0 | F2 == 0) begin
						state	<= 3'd3;
					end
					else
					begin
						if (E1 == E2) begin
							state <= 3'd3;
						end
						else if (E1 < E2)
						begin
							F1 <= {1'b0, F1[12:1]};
							E1 <= E1 + 1;
						end
						else
						begin
							F2 <= {1'b0, F2[12:1]};
							E2 <= E2 + 1;
						end
					end
				end

			3	:	begin
					S1 <= Addout[14];
					if(FV == 1'b0)
						F1 <= Fsum[12:0];
					else
					begin
						F1 <= Fsum[13:1];
						E1 <= E1 + 1;
					end
					state <= 3'd4;
				end
			4	:	begin
					if(F1 == 0)
					begin
						E1 <= 5'b00000;
						state <= 3'd6;
					end
					else
						state <= 3'd5;
					end
			5	:	begin
					if (E1 == 0)
					begin
						unf <= 1'b1;
						state <= 3'd6;
					end
					else if (FU == 1'b0)
						state <= 3'd6;
					else
					begin
						F1 <= {F1[11:0], 1'b0};
						E1 <= E1 - 1;
					end
				end
			6	:	begin
					if (E1 == 32)
						ovf <= 1'b1;
					state <= 3'd0;
				end
			endcase
		end
endmodule
			